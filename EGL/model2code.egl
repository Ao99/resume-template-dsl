[% import "util.eol"; %]
const folderName = '[%=resumeTemplate.folderName%]';
const fileName = '[%=resumeTemplate.fileName%]';
const defaultFont = '[%=resumeTemplate.defaultFont%]';
const defaultFontSize = [%=resumeTemplate.defaultFontSize%];
const defaultTablePadding = [%=resumeTemplate.defaultTablePadding%];
[%for(themeColor in resumeTemplate.themeColors) {%]
const [%=themeColor.name%] = '[%=themeColor.colorCode%]';
[%}%]

function main() {
  var doc = createFolderAndFile();
  var body = doc.getBody();

[%for(e in resumeTemplate.elements.sortBy(e : Element | e.elementIdx)) {
	e.getElementCode(1, "body");
}%]
  clearEmptyLines(body);
}
[%
// This function is recursive, so nested 'for' loop can be created if needed
operation Element getElementCode(level : Integer, parent : String) : String {
	var type = self.type().name;
	var indents = level.getIndents();
	
	if(type == "RepeatContainer") {
		var loopIdx = "i" + level; %]
[%=indents%]for(var [%=loopIdx%]=0; [%=loopIdx%]<[%=self.repeatTimes%]; [%=loopIdx%]++) {
[%		for(e in self.elements) {
			e.getElementCode(level+1, parent);
		} %]
[%=indents%]}

[%	} else {%]
[%=indents%]// [%=type.firstToLowerCase()%]
[%=indents%][%if(type == "Table"){%]var table = [%}%]create[%=type%]([%=parent%], {
[%
		var attributes = Map {
			'isAutoGenerated'="Number",
			'text'=String,
			'font'=String,
			'fontSize'="Number",
			'isUppercase'=Boolean,
			'isBold'=Boolean,
			'isItalic'=Boolean,
			'hAlignment'="Enum",
			'length'="Number",
			'numItems'="Plain",
			'minLength'="Number",
			'maxLength'="Number",
			'glyphType'="Enum",
			'numRows'="Plain",
			'numCols'="Plain",
			'widthPropCols'="Plain",
			'borderWidth'="Plain",
			'padding'="Number",
			'rowIdx'="Plain",
			'colIdx'="Plain",
			'color'="Color",
			'bgColor'="Color"
		};
		for(key in attributes.keySet()) {
			if(self.hasProperty(key)) {
				var value = attributes.get(key);
				var feature = self.eClass().getEStructuralFeature(key);
				var attr = self.eGet(feature);
				var indents = (level+1).getIndents();
				
				switch(value) {
					case String:
						if(attr != null and attr != "") { %]
[%=indents%]'[%=key%]': '[%=attr%]',
						[%}%]
[%					case "Number":
						if(attr != 0) { %]
[%=indents%]'[%=key%]': [%=attr%],
						[%}%]
[%					case Boolean:
						if(attr == true) { %]
[%=indents%]'[%=key%]': [%=attr%],
						[%}%]
[%					case "Enum": %]
[%=indents%]'[%=key%]': [%=key%].[%=attr.name%],
[%					case "Plain": %]
[%=indents%]'[%=key%]': [%=attr%],
[%					case "Color":
						if(attr != null) {%]
[%=indents%]'[%=key%]': [%=attr.name%],
						[%}%]
[%					default: continue;
				}
			}
		} %]
[%=indents%]});

[%		
		if(type == "Table") {
			var cells = self.cells.asSequence().sortBy(c : Cell | c.rowIdx * 100 + c.colIdx);
			for(c in cells) { %]
[%=indents%]// table cell ([%=c.rowIdx%],[%=c.colIdx%])
[%				for(e in c.textElements.sortBy(e : Element | e.elementIdx)) {
					e.getElementCode(level, "table.getRow(%s).getCell(%s)".format(Sequence{c.rowIdx,c.colIdx}));
				}
			}
		}
	}
} %]