operation Element getElementCode(numIndents : Integer, isInCell : Boolean) : String {	
	var type = self.type().name;
	var results = "";
	var indents = numIndents.getIndents();
	
	if(type == "RepeatContainer") {
		results += "%sfor(var i=0; i<%s; i++) {\n".format(Sequence{indents,self.repeatTimes});
		for(e in self.elements) results += e.getElementCode(numIndents+1, false);
		results += "%s}\n".format(Sequence{indents});
		
	} else {
		var attributes = Map {
			'isAutoGenerated'="Number",
			'text'=String,
			'font'=String,
			'fontSize'="Number",
			'isUppercase'=Boolean,
			'isBold'=Boolean,
			'isItalic'=Boolean,
			'hAlignment'="Enum",
			'length'="Number",
			'numItems'="Plain",
			'minLength'="Number",
			'maxLength'="Number",
			'glyphType'="Enum",
			'numRows'="Plain",
			'numCols'="Plain",
			'widthPropCols'="Plain",
			'borderWidth'="Plain",
			'padding'="Number",
			'rowIdx'="Plain",
			'colIdx'="Plain",
			'color'="Color",
			'bgColor'="Color"
		};
		var tableVar = "table";
		var isTableStr = (type == "Table") ? "var %s = ".format(Sequence{tableVar}) : "";
		var parent = isInCell ? tableVar : "body"; 
		results += "%s// %s\n%s%screate%s(%s, {\n".format(Sequence{indents,type.firstToLowerCase(),indents,isTableStr,type,parent});
		for(key in attributes.keySet()) {
			if(self.hasProperty(key)) {
				var value = attributes.get(key);
				var feature = self.eClass().getEStructuralFeature(key);
				var attr = self.eGet(feature);
				var indents = (numIndents+1).getIndents();
				
				switch(value) {
					case String: results += (attr == null or attr == "") ? "" : "%s'%s': '%s',\n".format(Sequence{indents,key,attr});
					case "Number": results += (attr == 0) ? "" : "%s'%s': %s,\n".format(Sequence{indents,key,attr});
					case Boolean: results += (attr == false) ? "" : "%s'%s': %s,\n".format(Sequence{indents,key,attr});
					case "Enum": results += "%s'%s': %s.%s,\n".format(Sequence{indents,key,key,attr.name});
					case "Plain": results += "%s'%s': %s,\n".format(Sequence{indents,key,attr});
					case "Color": results += (attr == null) ? "" : "%s'%s': %s,\n".format(Sequence{indents,key,attr.name});
					default: continue;
				}
			}
		}
		
		// get rid of the last ",\n"
		results = results.substring(0,results.length()-2);
		
		results += "\n%s});\n".format(Sequence{indents});
		
		if(type == "Table") results += self.getCellCode(numIndents);
	}
	
	return results;
}

operation Table getCellCode(numIndents : Integer) : String {
	var cells = self.cells.asSequence().sortBy(c : Cell | c.rowIdx * 100 + c.colIdx);
	
	var results = "\n";
	for(c in cells) {
		results += "%s// table cell (%s,%s)\n".format(Sequence{numIndents.getIndents(),c.rowIdx,c.colIdx});
		for(e in c.textElements.sort()) {
			results += e.getElementCode(numIndents, true);
		}
		results += "\n";
	}
	
	return results;
}

operation Integer getIndents() : String {
	var indent = "  ";
	
	var results = "";
	var i = 0;
	while(i < self) {
		results += indent;
		i++;
	}
	
	return results;
}

operation String format(params : Sequence) : String {
	var selfArray = self.split("%s");
	var results = "";
	
	var idx = 0;
	for(str in selfArray) {
		results += str;
		if(idx < params.size()) results += params.get(idx);
		idx++;
	}
	return results;
}

operation Collection sort() : Collection {
	var sequence = self.asSequence();
	return sequence.sortBy(e : Element | e.elementIdx);
}