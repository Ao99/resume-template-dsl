import "validation.eol";

pre {
}

context ResumeTemplate {
	constraint HasFolderName {
		check : self.folderName != ""
		message : "ResumeTemplate must define a folderName"
	}
	
	constraint HasFileName {
		check : self.fileName != ""
		message : "ResumeTemplate must define a fileName"
	}
	
	constraint HasDefaultFont {
		check : self.defaultFont != ""
		message : "ResumeTemplate must define a defaultFont"
	}
	
	constraint HasValidDefaultSize {
		check : self.defaultSize >= 1 and self.defaultSize <= 400
		message : "ResumeTemplate defaultSize " + self.defaultSize + " is out of the range [1,400]"
	}
	
	critique HasProperDefaultSize {
		check : self.defaultSize <= 24
		message : "ResumeTemplate defaultSize " + self.defaultSize + " may be too large"
	}
	
	constraint HasValidDefaultTablePadding {
		check : self.defaultTablePadding >= 0 and self.defaultTablePadding <= 50
		message : "ResumeTemplate defaultTablePadding " + self.defaultTablePadding + " is out of the range [0,50]"
	}
	
	critique HasProperDefaultTablePadding {
		check : self.defaultTablePadding <= 15
		message : "ResumeTemplate defaultTablePadding " + self.defaultTablePadding + " may be too large"
	}
	
	// the indexes of the elements should not contain duplicates
	constraint HasUniqueElementIndexes {
		check : self.elements.hasUniqueIndexes(self, "element")
		message : "Found duplicated element indexes in ResumeTemplate, see details in console"
	}
}

context ThemeColor {
	constraint HasName {
		check : self.name != ""
		message : "ThemeColor " + self + " must define a name"
	}
	
	constraint HasValidColorCode {
		check : self.colorCode.matches("^#(?:[0-9a-fA-F]{6})$") // hex color code, e.g. #4a99d5
		message : "ThemeColor colorCode " +  self.colorCode + " is not a valid hex color code"
	}
}

context Element {
	constraint HasNonNegativeElementIdx {
		check : self.elementIdx >= 0
		message : "Element elementIdx " + self.elementIdx + " is negative"
	}
}

context TextElement {
	constraint HasValidIsAutoGenerated {
		check : self.isAutoGenerated == 0 or self.isAutoGenerated = 1
		message : "TextElement isAutoGenerated " + self.isAutoGenerated + " is not 0 or 1"
	}
		
	constraint HasValidSize {
		check : self.size == 0 or (self.size >= 1 and self.size <= 400)
		message : "TextElement size " + self.size + " is not 0 and out of the range [1,400]"
	}
}

context Paragraph {
	constraint HasValidLength {
		guard : self.isAutoGenerated == 1
		check : self.length >= 0 and self.length <= 500
		message : "Paragraph length " + self.length + " is out of the range [0,1000]"
	}
}

context List {
	constraint HasValidNumItems {
		check : self.numItems >= 1 and self.numItems <= 20
		message : "List numItems " + self.numItems + " is out of the range [1,20]"
	}

	constraint HasValidMinLength {
		guard : self.isAutoGenerated == 1
		check : self.minLength >= 0 and self.minLength <= self.maxLength
		message : "List minLength " + self.minLength + " is negative or larger than maxLength"
	}
	
	constraint HasValidMaxLength {
		guard : self.isAutoGenerated == 1
		check : self.maxLength >= 0 and self.maxLength <= 50
		message : "List maxLength " + self.maxLength + " is out of the range [0,50]"
	}
}

context Table {
	constraint HasValidNumRows {
		check : self.numRows >= 1 and self.numRows <= 50
		message : "Table numRows " + self.numRows + " is out of the range [1,50]"
	}
	
	constraint HasValidNumCols {
		check : self.numCols >= 1 and self.numCols <= 20
		message : "Table numCols " + self.numCols + " is out of the range [1,20]"
	}
	
	constraint HasValidBorderWidth {
		check : self.borderWidth >= 0 and self.borderWidth <= 6
		message : "Table borderWidth " + self.borderWidth + " is out of the range [0,6]"
	}

	constraint HasValidWidthPropCols {
		check : self.hasValidWidthPropCols()
		message : "Table widthPropCols " + self.widthPropCols + " is invalid, see details in console"
	}
	
	constraint HasValidPadding {
		check : self.padding >= 0 and self.padding <= 50
		message : "Table padding " + self.padding + " is out of the range [0,50]"
	}
	
	constraint HasValidCells {
		check : self.hasValidCells()
		message : "Table cells are invalid, see details in console"
	}
}

context Cell {
	// the indexes of the elements should not contain duplicates
	constraint HasUniqueElementIndexes {
		check : self.textElements.hasUniqueIndexes(self, "element")
		message : "Found duplicated element indexes in Cell, see details in console"
	}
}

context HorizontalLine {		
	constraint HasValidSize {
		check : self.size >= 1 and self.size <= 50
		message : "HorizontalLine size " + self.size + " is out of the range [1,50]"
	}
}