import "util.eol";

context ResumeTemplate {
	constraint HasFolderName {
		check : self.folderName != ""
		message : "ResumeTemplate must define a folderName"
	}
	
	constraint HasFileName {
		check : self.fileName != ""
		message : "ResumeTemplate must define a fileName"
	}
	
	constraint HasDefaultFont {
		check : self.defaultFont != ""
		message : "ResumeTemplate must define a defaultFont"
	}
	
	constraint HasValidDefaultFontSize {
		check : self.defaultFontSize >= 1 and self.defaultFontSize <= 400
		message : "ResumeTemplate defaultFontSize " + self.defaultFontSize + " is out of the range [1,400]"
	}
	
	critique HasProperDefaultFontSize {
		check : self.defaultFontSize <= 24
		message : "ResumeTemplate defaultFontSize " + self.defaultFontSize + " may be too large"
	}
	
	constraint HasValidDefaultTablePadding {
		check : self.defaultTablePadding >= 0 and self.defaultTablePadding <= 50
		message : "ResumeTemplate defaultTablePadding " + self.defaultTablePadding + " is out of the range [0,50]"
	}
	
	critique HasProperDefaultTablePadding {
		check : self.defaultTablePadding <= 15
		message : "ResumeTemplate defaultTablePadding " + self.defaultTablePadding + " may be too large"
	}
	
	// the indexes of the elements should not contain duplicates
	constraint HasUniqueElementIndexes {
		check : self.elements.hasUniqueIndexes(self, "element")
		message : "Found duplicated element indexes in ResumeTemplate, see details in console"
	}
}

context ThemeColor {
	constraint HasName {
		check : self.name != ""
		message : self + " must define a name"
	}
	
	constraint HasValidColorCode {
		check : self.colorCode.matches("^#(?:[0-9a-fA-F]{6})$") // hex color code, e.g. #4a99d5
		message : self + " colorCode " +  self.colorCode + " is not a valid hex color code"
	}
}

context Element {
	constraint HasNonNegativeElementIdx {
		check : self.elementIdx >= 0
		message : self + " elementIdx " + self.elementIdx + " is negative"
	}
}

context RepeatContainer {
	constraint HasPositiveRepeatTimes {
		check : self.repeatTimes > 0
		message : self + " repeatTimes " + self.repeatTimes + " is non-positive"
	}
	
	// the indexes of the elements should not contain duplicates
	constraint HasUniqueElementIndexes {
		check : self.elements.hasUniqueIndexes(self, "element")
		message : "Found duplicated element indexes in RepeatContainer, see details in console"
	}
}

context TextElement {
	constraint HasValidIsAutoGenerated {
		check : self.isAutoGenerated == 0 or self.isAutoGenerated = 1
		message : self + " isAutoGenerated " + self.isAutoGenerated + " is not 0 or 1"
	}
		
	constraint HasValidFontSize {
		check : self.fontSize == 0 or (self.fontSize >= 1 and self.fontSize <= 400)
		message : self + " fontSize " + self.fontSize + " is not 0 and out of the range [1,400]"
	}
}

context Paragraph {
	constraint HasValidLength {
		guard : self.isAutoGenerated == 1
		check : self.length >= 0 and self.length <= 500
		message : self + " length " + self.length + " is out of the range [0,500]"
	}
}

context List {
	constraint HasValidNumItems {
		check : self.numItems >= 1 and self.numItems <= 20
		message : self + " numItems " + self.numItems + " is out of the range [1,20]"
	}

	constraint HasValidMinLength {
		guard : self.isAutoGenerated == 1
		check : self.minLength >= 0 and self.minLength <= self.maxLength
		message : self + " minLength " + self.minLength + " is negative or larger than maxLength"
	}
	
	constraint HasValidMaxLength {
		guard : self.isAutoGenerated == 1
		check : self.maxLength >= 0 and self.maxLength <= 50
		message : self + " maxLength " + self.maxLength + " is out of the range [0,50]"
	}
}

context Table {
	constraint HasValidNumRows {
		check : self.numRows >= 1 and self.numRows <= 50
		message : self + " numRows " + self.numRows + " is out of the range [1,50]"
	}
	
	constraint HasValidNumCols {
		check : self.numCols >= 1 and self.numCols <= 20
		message : self + " numCols " + self.numCols + " is out of the range [1,20]"
	}
	
	constraint HasValidBorderWidth {
		check : self.borderWidth >= 0 and self.borderWidth <= 6
		message : self + " borderWidth " + self.borderWidth + " is out of the range [0,6]"
	}

	constraint HasValidWidthPropCols {
		check : self.hasValidWidthPropCols()
		message : "Table widthPropCols " + self.widthPropCols + " is invalid, see details in console"
	}
	
	constraint HasValidPadding {
		check : self.padding >= 0 and self.padding <= 50
		message : self + " padding " + self.padding + " is out of the range [0,50]"
	}
	
	constraint HasValidCells {
		check : self.hasValidCells()
		message : "Table cells are invalid, see details in console"
	}
}

context Cell {
	// the indexes of the elements should not contain duplicates
	constraint HasUniqueElementIndexes {
		check : self.textElements.hasUniqueIndexes(self, "element")
		message : "Found duplicated element indexes in Cell, see details in console"
	}
}

context HorizontalLine {		
	constraint HasValidFontSize {
		check : self.fontSize >= 1 and self.fontSize <= 50
		message : self + " fontSize " + self.fontSize + " is out of the range [1,50]"
	}
}