// this method is called from 4 different parent Object:
// ResumeTemplate, RepeatContainer, Cell, and Table
operation Collection hasUniqueIndexes(parent : EObject) : Boolean {
	var isValid = true;
	var isCell = parent.type().name == "Table";
	
	var idxMap = new Map;
	for(item in self) {
		var idx = isCell ? "(%s,%s)".format(Sequence{item.rowIdx,item.colIdx}) : item.elementIdx;
		var sequence;
		if(idxMap.containsKey(idx)) {
			sequence = idxMap.get(idx);
			isValid = false;
		} else {
			sequence = new Sequence;
		}
		sequence.add(item);
		idxMap.put(idx, sequence);
	}
	
	if(not isValid) {
		var itemType = isCell ? "cell" : "element";
		"Error in %s".format(Sequence{parent}).println();
		("Found " + itemType + "s with duplicated indexes:").println();
		for(idx in idxMap.keySet()) {
			var sequence = idxMap.get(idx);
			if(sequence.size() > 1) {
				(itemType + " index = " + idx).println();
				for(e in sequence) e.println();
			}
		}		
		"- - - - -".println();
	}
	return isValid;
}

operation Table hasValidWidthPropCols() : Boolean {
	var widthPropCols = self.widthPropCols;
	var numCols = self.numCols;
	var isValid = true;
	
	if(not widthPropCols.isDefined()) {
		"Error in %s".format(Sequence{self}).println();
		("widthPropCols is not defined").println();
		"- - - - -".println();
		return false;
	}
	
	if(not widthPropCols.matches("^\\[([0-9]+,)+([0-9]+)\\]$")) {
		"Error in %s".format(Sequence{self}).println();
		("widthPropCols '" + widthPropCols + "' has an invalid format").println();
		"A valid format example is '[5,1,2,2]'".println();
		"- - - - -".println();
		return false;
	}
	
	var widthArr = widthPropCols.split(",");
	if(widthArr.size() != numCols + 1) {
		"Error in %s".format(Sequence{self}).println();
		("widthPropCols '" + widthPropCols + "' has wrong count of numbers").println();
		("The count of numbers should equal to " + (numCols + 1)).println();
		"- - - - -".println();
		isValid = false;
	}
	
	for(num in widthArr) {
		if(num.characterAt(0) == '0') {
			"Error in %s".format(Sequence{self}).println();
			("The number '" + num + "' shouldn't start with '0'").println();
			"- - - - -".println();
			isValid = false;
		}
	}
	
	return isValid;
}

operation Table hasValidCells() : Boolean {
	var cells = self.cells;
	var numRows = self.numRows;
	var numCols = self.numCols;
	var isValid = true;
	
	if(numRows >0 or numCols <= 0) {
		// correct count of cells
		if(cells.size() != numRows * numCols) {
			"Error in %s".format(Sequence{self}).println();
			"%s cells are expected but %s ones are found".format(Sequence{numRows * numCols,cells.size()}).println();
			"- - - - -".println();
			isValid = false;
		}
		
		// cells shouldn't have indexes out of bounds
		for(c in cells) {
			if(c.rowIdx < 0 or c.rowIdx > numRows - 1 or c.colIdx < 0 or c.colIdx > numCols - 1) {
				"Error in %s".format(Sequence{self}).println();
				"Found cell with indexes out the bounds of a %sx%s table:".format(Sequence{numRows,numCols}).println();
				c.println();
				"- - - - -".println();
				isValid = false;
			}
		}
	}
	
	
	// cells shouldn't have duplicated indexes
	isValid = cells.hasUniqueIndexes(self);
	
	return isValid;
}

operation String format(params : Sequence) : String {
	var selfArray = self.split("%s");
	var results = "";
	
	var idx = 0;
	for(str in selfArray) {
		results += str;
		if(idx < params.size()) results += params.get(idx);
		idx++;
	}
	return results;
}