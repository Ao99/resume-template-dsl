/**
 */
package resume_template.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import resume_template.HAlignment;
import resume_template.Resume_templatePackage;
import resume_template.TextElement;
import resume_template.ThemeColor;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Text Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link resume_template.impl.TextElementImpl#getIsAutoGenerated <em>Is Auto Generated</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#getText <em>Text</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#getFont <em>Font</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#getSize <em>Size</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#isIsUppercase <em>Is Uppercase</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#isIsBold <em>Is Bold</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#isIsItalic <em>Is Italic</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#getHAlignment <em>HAlignment</em>}</li>
 *   <li>{@link resume_template.impl.TextElementImpl#getColor <em>Color</em>}</li>
 * </ul>
 *
 * @generated
 */
public abstract class TextElementImpl extends ElementImpl implements TextElement {
	/**
	 * The default value of the '{@link #getIsAutoGenerated() <em>Is Auto Generated</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIsAutoGenerated()
	 * @generated
	 * @ordered
	 */
	protected static final int IS_AUTO_GENERATED_EDEFAULT = 0;

	/**
	 * The cached value of the '{@link #getIsAutoGenerated() <em>Is Auto Generated</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIsAutoGenerated()
	 * @generated
	 * @ordered
	 */
	protected int isAutoGenerated = IS_AUTO_GENERATED_EDEFAULT;

	/**
	 * The default value of the '{@link #getText() <em>Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getText()
	 * @generated
	 * @ordered
	 */
	protected static final String TEXT_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getText() <em>Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getText()
	 * @generated
	 * @ordered
	 */
	protected String text = TEXT_EDEFAULT;

	/**
	 * The default value of the '{@link #getFont() <em>Font</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFont()
	 * @generated
	 * @ordered
	 */
	protected static final String FONT_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getFont() <em>Font</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFont()
	 * @generated
	 * @ordered
	 */
	protected String font = FONT_EDEFAULT;

	/**
	 * The default value of the '{@link #getSize() <em>Size</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSize()
	 * @generated
	 * @ordered
	 */
	protected static final double SIZE_EDEFAULT = 0.0;

	/**
	 * The cached value of the '{@link #getSize() <em>Size</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSize()
	 * @generated
	 * @ordered
	 */
	protected double size = SIZE_EDEFAULT;

	/**
	 * The default value of the '{@link #isIsUppercase() <em>Is Uppercase</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsUppercase()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IS_UPPERCASE_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIsUppercase() <em>Is Uppercase</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsUppercase()
	 * @generated
	 * @ordered
	 */
	protected boolean isUppercase = IS_UPPERCASE_EDEFAULT;

	/**
	 * The default value of the '{@link #isIsBold() <em>Is Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsBold()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IS_BOLD_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIsBold() <em>Is Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsBold()
	 * @generated
	 * @ordered
	 */
	protected boolean isBold = IS_BOLD_EDEFAULT;

	/**
	 * The default value of the '{@link #isIsItalic() <em>Is Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsItalic()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IS_ITALIC_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIsItalic() <em>Is Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsItalic()
	 * @generated
	 * @ordered
	 */
	protected boolean isItalic = IS_ITALIC_EDEFAULT;

	/**
	 * The default value of the '{@link #getHAlignment() <em>HAlignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHAlignment()
	 * @generated
	 * @ordered
	 */
	protected static final HAlignment HALIGNMENT_EDEFAULT = HAlignment.LEFT;

	/**
	 * The cached value of the '{@link #getHAlignment() <em>HAlignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHAlignment()
	 * @generated
	 * @ordered
	 */
	protected HAlignment hAlignment = HALIGNMENT_EDEFAULT;

	/**
	 * The cached value of the '{@link #getColor() <em>Color</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getColor()
	 * @generated
	 * @ordered
	 */
	protected ThemeColor color;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextElementImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return Resume_templatePackage.Literals.TEXT_ELEMENT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int getIsAutoGenerated() {
		return isAutoGenerated;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIsAutoGenerated(int newIsAutoGenerated) {
		int oldIsAutoGenerated = isAutoGenerated;
		isAutoGenerated = newIsAutoGenerated;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__IS_AUTO_GENERATED, oldIsAutoGenerated, isAutoGenerated));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getText() {
		return text;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setText(String newText) {
		String oldText = text;
		text = newText;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__TEXT, oldText, text));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getFont() {
		return font;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setFont(String newFont) {
		String oldFont = font;
		font = newFont;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__FONT, oldFont, font));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public double getSize() {
		return size;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setSize(double newSize) {
		double oldSize = size;
		size = newSize;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__SIZE, oldSize, size));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isIsUppercase() {
		return isUppercase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIsUppercase(boolean newIsUppercase) {
		boolean oldIsUppercase = isUppercase;
		isUppercase = newIsUppercase;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__IS_UPPERCASE, oldIsUppercase, isUppercase));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isIsBold() {
		return isBold;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIsBold(boolean newIsBold) {
		boolean oldIsBold = isBold;
		isBold = newIsBold;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__IS_BOLD, oldIsBold, isBold));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isIsItalic() {
		return isItalic;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIsItalic(boolean newIsItalic) {
		boolean oldIsItalic = isItalic;
		isItalic = newIsItalic;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__IS_ITALIC, oldIsItalic, isItalic));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public HAlignment getHAlignment() {
		return hAlignment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setHAlignment(HAlignment newHAlignment) {
		HAlignment oldHAlignment = hAlignment;
		hAlignment = newHAlignment == null ? HALIGNMENT_EDEFAULT : newHAlignment;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__HALIGNMENT, oldHAlignment, hAlignment));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ThemeColor getColor() {
		if (color != null && color.eIsProxy()) {
			InternalEObject oldColor = (InternalEObject)color;
			color = (ThemeColor)eResolveProxy(oldColor);
			if (color != oldColor) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, Resume_templatePackage.TEXT_ELEMENT__COLOR, oldColor, color));
			}
		}
		return color;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ThemeColor basicGetColor() {
		return color;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setColor(ThemeColor newColor) {
		ThemeColor oldColor = color;
		color = newColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, Resume_templatePackage.TEXT_ELEMENT__COLOR, oldColor, color));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case Resume_templatePackage.TEXT_ELEMENT__IS_AUTO_GENERATED:
				return getIsAutoGenerated();
			case Resume_templatePackage.TEXT_ELEMENT__TEXT:
				return getText();
			case Resume_templatePackage.TEXT_ELEMENT__FONT:
				return getFont();
			case Resume_templatePackage.TEXT_ELEMENT__SIZE:
				return getSize();
			case Resume_templatePackage.TEXT_ELEMENT__IS_UPPERCASE:
				return isIsUppercase();
			case Resume_templatePackage.TEXT_ELEMENT__IS_BOLD:
				return isIsBold();
			case Resume_templatePackage.TEXT_ELEMENT__IS_ITALIC:
				return isIsItalic();
			case Resume_templatePackage.TEXT_ELEMENT__HALIGNMENT:
				return getHAlignment();
			case Resume_templatePackage.TEXT_ELEMENT__COLOR:
				if (resolve) return getColor();
				return basicGetColor();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case Resume_templatePackage.TEXT_ELEMENT__IS_AUTO_GENERATED:
				setIsAutoGenerated((Integer)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__TEXT:
				setText((String)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__FONT:
				setFont((String)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__SIZE:
				setSize((Double)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__IS_UPPERCASE:
				setIsUppercase((Boolean)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__IS_BOLD:
				setIsBold((Boolean)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__IS_ITALIC:
				setIsItalic((Boolean)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__HALIGNMENT:
				setHAlignment((HAlignment)newValue);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__COLOR:
				setColor((ThemeColor)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case Resume_templatePackage.TEXT_ELEMENT__IS_AUTO_GENERATED:
				setIsAutoGenerated(IS_AUTO_GENERATED_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__TEXT:
				setText(TEXT_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__FONT:
				setFont(FONT_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__SIZE:
				setSize(SIZE_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__IS_UPPERCASE:
				setIsUppercase(IS_UPPERCASE_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__IS_BOLD:
				setIsBold(IS_BOLD_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__IS_ITALIC:
				setIsItalic(IS_ITALIC_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__HALIGNMENT:
				setHAlignment(HALIGNMENT_EDEFAULT);
				return;
			case Resume_templatePackage.TEXT_ELEMENT__COLOR:
				setColor((ThemeColor)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case Resume_templatePackage.TEXT_ELEMENT__IS_AUTO_GENERATED:
				return isAutoGenerated != IS_AUTO_GENERATED_EDEFAULT;
			case Resume_templatePackage.TEXT_ELEMENT__TEXT:
				return TEXT_EDEFAULT == null ? text != null : !TEXT_EDEFAULT.equals(text);
			case Resume_templatePackage.TEXT_ELEMENT__FONT:
				return FONT_EDEFAULT == null ? font != null : !FONT_EDEFAULT.equals(font);
			case Resume_templatePackage.TEXT_ELEMENT__SIZE:
				return size != SIZE_EDEFAULT;
			case Resume_templatePackage.TEXT_ELEMENT__IS_UPPERCASE:
				return isUppercase != IS_UPPERCASE_EDEFAULT;
			case Resume_templatePackage.TEXT_ELEMENT__IS_BOLD:
				return isBold != IS_BOLD_EDEFAULT;
			case Resume_templatePackage.TEXT_ELEMENT__IS_ITALIC:
				return isItalic != IS_ITALIC_EDEFAULT;
			case Resume_templatePackage.TEXT_ELEMENT__HALIGNMENT:
				return hAlignment != HALIGNMENT_EDEFAULT;
			case Resume_templatePackage.TEXT_ELEMENT__COLOR:
				return color != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (isAutoGenerated: ");
		result.append(isAutoGenerated);
		result.append(", text: ");
		result.append(text);
		result.append(", font: ");
		result.append(font);
		result.append(", size: ");
		result.append(size);
		result.append(", isUppercase: ");
		result.append(isUppercase);
		result.append(", isBold: ");
		result.append(isBold);
		result.append(", isItalic: ");
		result.append(isItalic);
		result.append(", hAlignment: ");
		result.append(hAlignment);
		result.append(')');
		return result.toString();
	}

} //TextElementImpl
