@namespace(uri="resume_template", prefix="resume_template")
package resume_template;
@gmf

@gmf.diagram
@exeed(label="return 'ResumeTemplate';", classIcon="resource")
class ResumeTemplate {
	attr String folderName = "Resume Templates";
	attr String fileName = "Resume Template";
	attr String defaultFont = "Arial";
	attr double defaultSize = 11;
	attr int defaultTablePadding = 0;
	
	@gmf.compartment
	val ThemeColor[*] themeColors;
	@gmf.compartment
	val Element[*] elements;
}

@gmf.node(label = "colorCode", label.pattern="Color code: {0}",
	figure = "ellipse", size = "150,30")
@exeed(label="return 'Color code: ' + self.colorCode;", classIcon="group")
class ThemeColor {
	attr String name = "themeColor";
	attr String colorCode = "#FFFFFF";
}

abstract class Element {
	attr int elementIdx;
}

abstract class TextElement extends Element {
	attr int isAutoGenerated = 0; // 0 means false, using 'int' to be compatible with 'choice' in Java Message Format
	attr String text; // if isAutoGenerated, then this is ignored
	attr String font;
	attr double size;
	attr boolean isUppercase = false;
	attr boolean isBold = false;
	attr boolean isItalic = false;
	attr HAlignment hAlignment;
	@gmf.link(target.decoration="arrow", style="dash")
	ref ThemeColor color;
}

enum HAlignment {
	LEFT;
	CENTER;
	RIGHT;
	JUSTIFY;
}

@gmf.node(label = "isAutoGenerated,text,length",
	label.pattern="Paragraph {0,choice,0#text: {1}|1#length: {2}}",
	figure = "polygon",
	polygon.x="0 90 100 90 90 100 100 0",
	polygon.y="0 0 10 10 0 10 40 40")
@exeed(label="
		var label : String;
		label = 'Paragraph ';
		if(self.isAutoGenerated) {
			label = label + 'length: ' + self.length;
		} else {
			label = label + 'text: ' + self.text;			
		}
		return label;
	", classIcon="text")
class Paragraph extends TextElement {
	attr int length; // if isAutoGenerated, the length of auto-generated text
}

@gmf.node(label = "numItems", label.pattern="List numItems: {0}",
	figure = "polygon",
	polygon.x="0 90 100 90 90 100 100 0 0 3 6 3 0 0 3 6 3 0 0 3 6 3 0",
	polygon.y="0 0 10 10 0 10 40 40 35 32 35 38 35 25 22 25 28 25 15 12 15 18 15")
@exeed(label="return 'List numItems: ' + self.numItems;", classIcon="text")
class List extends TextElement {
	attr int numItems;
	// if isAutoGenerated, each list item has a length between min and max
    attr int minLength;
    attr int maxLength;
    attr GlyphType glyphType;
}

enum GlyphType {
	BULLET;
	HOLLOW_BULLET;
	SQUARE_BULLET;
	NUMBER;
}

@gmf.node(label = "numRows,numCols", label.pattern="Table size: {0}x{1}",
	figure = "rectangle")
@exeed(label="return 'Table size: ' + self.numRows + 'x' + self.numCols;", classIcon="table")
class Table extends Element {
	attr int numRows;
	attr int numCols;
 	/*
	 * 'widthPropCols' is the propotions of the width of the columns
	 * e.g. for 3 columns, "5,1,2,2" means
	 * each column respectively takes 1/5, 2/5, 2/5 of the whole width
	 */
	attr String widthPropCols;
	attr int borderWidth = 0;
	attr int padding = 0;
	@gmf.link(target.decoration="arrow", style="dash")
    ref ThemeColor bgColor;
    
	@gmf.compartment
    val Cell[*] cells;
}

@gmf.node(label = "rowIdx,colIdx", label.pattern="Cell idx: ({0},{1})",
	figure = "rectangle")
@exeed(label="return 'Cell idx: (' + self.rowIdx + ',' + self.colIdx + ')';", classIcon="column")
class Cell {
	attr int rowIdx;
	attr int colIdx;
	
	@gmf.compartment
	val TextElement[*] textElements; // a table cell can contain paragraphs and lists
}

@gmf.node(label = "size", label.pattern="HorizontalLine size: {0}",
	figure = "polygon", size = "700,5",
	polygon.x="0 500",
	polygon.y="0 0")
@exeed(label="return 'HorizontalLine size: ' + self.size;", classIcon="transition")
class HorizontalLine extends Element {
	attr double size = 5;
}